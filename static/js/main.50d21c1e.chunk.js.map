{"version":3,"sources":["data/tests.js","components/TestSelection.js","containers/Home.js","containers/About.js","components/TestError.js","constants/TargetCategoryDisplayType.js","constants/ImplicitBiasTestBlocks.js","constants/InputKeys.js","data/targetAndCategoryValues.js","formatters.js","components/ActiveTest.js","actions/index.js","components/Instructions.js","components/BlockStart.js","components/TargetAndOrCategory.js","components/Block.js","constants/Bias.js","components/Results.js","components/TestNotFound.js","components/TestStart.js","containers/ImplicitBiasTest.js","App.js","reducers/index.js","serviceWorker.js","index.js"],"names":["tests","id","name","description","targetType","categoryType","compatible","TestSelection","React","createElement","class","className","map","_ref","key","Link","to","concat","Home","About","TestError","TARGET_CATEGORY_DISPLAY_TYPE","INCOMPATIBLE_TARGETS_ONLY","INCOMPATIBLE_ALL","CATEGORIES_ONLY","COMPATIBLE_TARGETS_ONLY","COMPATIBLE_ALL","IMPLICIT_BIAS_TEST_BLOCKS","numTrials","displayType","DISPLAY_TYPE","critical","getEventKeyForInputKey","inputKey","INPUT_KEYS","LEFT","RIGHT","START_KEY","targetAndCategoryValues","south_african","foreigner","good_person","bad_person","toTitleCase","text","split","word","charAt","toUpperCase","substring","reduce","acc","cur","TARGET_OR_CATEGORY","LEFT_OR_RIGHT","TARGET_CATEGORY_ORDER","LEFT_RIGHT_OPTIONS","ActiveTest","Component","constructor","super","valuesForOptions","targetOrCategory","leftOrRight","this","props","leftTargetValues","rightTargetValues","leftCategoryValues","rightCategoryValues","startNewRound","currentRound","state","currentBlock","dispatchFinishBlock","soleTargetOrCategory","Math","round","random","valuesWithoutLastTwoRoundValues","filter","v","valueToDisplay","lastValueToDisplay","indexOf","floor","length","setState","incorrectKeyPressed","handleKeyPress","event","handleLeftKeyPress","handleRightKeyPress","displayIncorrectKeySign","componentDidMount","timeStarted","Date","now","document","addEventListener","componentWillUnmount","removeEventListener","totalTime","dispatchSetCompatibleMilliseconds","dispatchSetIncompatibleMilliseconds","currentTest","currentBlockIndex","dispatchFinishTest","render","getSoleTargetOrCategory","leftTarget","leftCategory","VisibleActiveTest","connect","mapStateToProps","_ref2","rightTarget","rightCategory","dispatch","type","millis","compatibleMilliseconds","incompatibleMilliseconds","getInstructionForSide","target","category","isLeft","onlyTarget","side","categoryOrTargetClass","value","styledValue","Instructions","leftInstruction","rightInstruction","extraInstruction","getExtraInstruction","hasTargetAndCategory","BlockStart","arguments","startBlock","displayIndex","numBlocks","Object","keys","TargetAndOrCategory","VisibleBlock","dispatchStartBlock","test","result","targetList","reverseTargetList","slice","reverse","categoryList","values","assign","getDisplayValuesForType","blockStarted","BIAS","NONE","COMPATIBLE","INCOMPATIBLE","Results","dispatchResetTest","resultStatement","getResultStatement","bias","targetsInCompatibleOrder","categories","firstCategory","secondCategory","targetsInIncompatibleOrder","getBias","incompatibleCompatibleDiff","abs","VisibleResults","TestNotFound","TestStart","onStartTestButtonPress","onClick","e","preventDefault","VisibleImplicitBiasTest","dispatchStartTest","startTest","testId","useParams","find","finished","Block","App","Router","Switch","Route","path","ImplicitBiasTest","initialState","rootReducer","combineReducers","undefined","action","Boolean","window","location","hostname","match","store","createStore","Provider","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50d21c1e.chunk.js","sourcesContent":["// Possible test (each with compatible targets to category data)\n\nconst tests = [\n  {\n    id: 'power-happiness',\n    name: 'African test',\n    description: '',\n    targetType: 'nationality',\n    categoryType: 'type of person',\n    compatible: {\n      'south_african': 'good_person',\n      'foreigner': 'bad_person'\n    },\n    \n  }\n]\n\nexport default tests;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport tests from '../data/tests'\n\nexport default function TestSelection() {\n  return (\n    <div>\n        <h4 class=\"header center red-text text-darken-4\">Pick an implicit association test to take:</h4>\n      <section className=\"test-list\">\n      {tests.map(({name, description, id}) => (\n        <div className=\"test-option\" key={id}>\n          <h4 class=\"header center grey-text\"><Link to={`/test/${id}`}>{name}</Link></h4>\n          <p class=\"center\">{description}</p>\n        </div>\n      ))}\n      </section>\n    </div>\n  )\n}\n","import React from 'react'\nimport TestSelection from '../components/TestSelection'\n\nexport default function Home() {\n  return (\n    <div>\n    <h1 class=\"header center red-text text-darken-4\">Implicit Association Tool</h1>\n    <div class=\"row center\">\n        <h5 class=\"header col s12 light\">\n            <p>Uncover and discuss the underlying biases we share.</p>\n        </h5> \n      </div>\n\n      <div class=\"divider\"></div>\n      <TestSelection />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function About() {\n  return (\n    <div>\n      <h2>About</h2>\n      <p>This is a tool to roughly measure implicit association bias.</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function TestError() {\n  return (\n    <div className=\"error\">\n      <h2>Test error</h2>\n      <div>\n        Apologies, we encountered an unexpected error. Please try returning to the <Link to=\"/home\">home page</Link>.\n      </div>\n    </div>\n  )\n}\n","const TARGET_CATEGORY_DISPLAY_TYPE = {\n  INCOMPATIBLE_TARGETS_ONLY: 'INCOMPATIBLE_TARGETS_ONLY',\n  INCOMPATIBLE_ALL: 'INCOMPATIBLE_ALL',\n  CATEGORIES_ONLY: 'CATEGORIES_ONLY',\n  COMPATIBLE_TARGETS_ONLY: 'COMPATIBLE_TARGETS_ONLY',\n  COMPATIBLE_ALL: 'COMPATIBLE_ALL',\n}\n\nexport default TARGET_CATEGORY_DISPLAY_TYPE\n\nexport function getDisplayValuesForType(displayType, compatible) {\n  const result = {\n    leftTarget: null, rightTarget: null, leftCategory: null, rightCategory: null\n  }\n  const targetList = Object.keys(compatible)\n  const reverseTargetList = targetList.slice().reverse()\n  const categoryList = Object.values(compatible)\n  switch(displayType) {\n    case TARGET_CATEGORY_DISPLAY_TYPE.CATEGORIES_ONLY:\n      return Object.assign(result, {\n        leftCategory: categoryList[0], rightCategory: categoryList[1]\n      })\n    case TARGET_CATEGORY_DISPLAY_TYPE.COMPATIBLE_ALL:\n      return Object.assign(result, {\n        leftTarget: targetList[0], rightTarget: targetList[1], leftCategory: categoryList[0], rightCategory: categoryList[1]\n      })\n    case TARGET_CATEGORY_DISPLAY_TYPE.COMPATIBLE_TARGETS_ONLY:\n      return Object.assign(result, {leftTarget: targetList[0], rightTarget: targetList[1]})\n    case TARGET_CATEGORY_DISPLAY_TYPE.INCOMPATIBLE_ALL:\n      return Object.assign(result, {\n        leftTarget: reverseTargetList[0], rightTarget: reverseTargetList[1], leftCategory: categoryList[0], rightCategory: categoryList[1]\n      }) \n    case TARGET_CATEGORY_DISPLAY_TYPE.INCOMPATIBLE_TARGETS_ONLY:\n      return Object.assign(result, {\n        leftTarget: reverseTargetList[0], rightTarget: reverseTargetList[1]\n      }) \n    default:\n      return result\n  }\n}","import DISPLAY_TYPE from '../constants/TargetCategoryDisplayType';\n\nconst IMPLICIT_BIAS_TEST_BLOCKS = [\n  {\n    numTrials: 10,\n    displayType: DISPLAY_TYPE.INCOMPATIBLE_TARGETS_ONLY\n  },\n  {\n    numTrials: 10,\n    displayType: DISPLAY_TYPE.CATEGORIES_ONLY\n  },\n  {\n    numTrials: 10,\n    displayType: DISPLAY_TYPE.INCOMPATIBLE_ALL\n  },\n  {\n    numTrials: 20,\n    displayType: DISPLAY_TYPE.INCOMPATIBLE_ALL,\n    critical: true\n  },\n  {\n    numTrials: 10,\n    displayType: DISPLAY_TYPE.COMPATIBLE_TARGETS_ONLY\n  },\n  {\n    numTrials: 10,\n    displayType: DISPLAY_TYPE.COMPATIBLE_ALL\n  },\n  {\n    numTrials: 20,\n    displayType: DISPLAY_TYPE.COMPATIBLE_ALL,\n    critical: true\n  }\n]\n\nexport default IMPLICIT_BIAS_TEST_BLOCKS;\n","const INPUT_KEYS = {\n  LEFT: 'E',\n  RIGHT: 'I',\n  START_KEY: 'space bar'\n}\n\nexport const getEventKeyForInputKey = (inputKey) => {\n  switch(inputKey) {\n    case 'E':\n      return 'e'\n    case 'I':\n      return 'i'\n    case 'space bar':\n      return ' '\n    default:\n      return null; // unsupported\n  }\n}\n\nexport default INPUT_KEYS\n","const targetAndCategoryValues = {\n  south_african: ['white south africans', 'black south africans','umzulu','afrikaner','motswana','sotho','umlungu', 'colored  south africans', 'malay', 'umxhosa'],\n  foreigner: ['bangladeshi','british','congolese', 'kenyans', 'indian','italian','mozambican', 'nigerians', 'somalians', 'zimbabweans'],\n  good_person: ['job-promoter', 'doctor', 'lawyer', 'good-samaritan', 'philanthropist', 'police officer', 'humanitarian', 'hard-working', 'polite','peaceful'],\n  bad_person: ['job-stealer', 'murderer', 'rapist', 'troubled', 'burglarer', 'drug-trafficker', 'fraudster', 'lazy', 'rude', 'aggressive']\n}\n\nexport default targetAndCategoryValues\n","export const toTitleCase = (text) => !!text ?\n  text\n    .split(/[ _]/)\n    .map(word => word.charAt(0).toUpperCase() + word.substring(1))\n    .reduce((acc, cur) => !acc ? cur : `${acc} ${cur}`, '') :\n  text\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport TestError from './TestError'\nimport { finishBlock, finishTest, setCompatibleMilliseconds, setIncompatibleMilliseconds } from '../actions'\nimport IMPLICIT_BIAS_TEST_BLOCKS from '../constants/ImplicitBiasTestBlocks'\nimport INPUT_KEYS, { getEventKeyForInputKey } from '../constants/InputKeys'\nimport targetAndCategoryValues from '../data/targetAndCategoryValues'\nimport { toTitleCase } from '../formatters'\nimport TARGET_CATEGORY_DISPLAY_TYPE from '../constants/TargetCategoryDisplayType'\n\nconst TARGET_OR_CATEGORY = { // need to be lowercase - will be used as classes\n  TARGET: 'target',\n  CATEGORY: 'category'\n}\n\nconst LEFT_OR_RIGHT = {\n  LEFT: 'LEFT',\n  RIGHT: 'RIGHT'\n}\n\nconst TARGET_CATEGORY_ORDER = [TARGET_OR_CATEGORY.TARGET, TARGET_OR_CATEGORY.CATEGORY]\nconst LEFT_RIGHT_OPTIONS = [LEFT_OR_RIGHT.LEFT, LEFT_OR_RIGHT.RIGHT]\n\nclass ActiveTest extends React.Component {\n  constructor() {\n    super()\n    this.state = { currentRound: -1 }\n  }\n  componentDidMount() {\n    if (!!this.props.currentBlock && this.props.currentBlock.critical) {\n      this.setState({ timeStarted: Date.now() })\n    }\n    document.addEventListener('keyup', this.handleKeyPress)\n    this.startNewRound()\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyPress)\n    if (this.props.currentBlock.critical) {\n      const totalTime = Date.now() - this.state.timeStarted\n      this.props.currentBlock.displayType === TARGET_CATEGORY_DISPLAY_TYPE.COMPATIBLE_ALL ?\n        this.props.dispatchSetCompatibleMilliseconds(totalTime) :\n        this.props.dispatchSetIncompatibleMilliseconds(totalTime)\n    }\n    \n    if (this.props.currentTest.currentBlockIndex  === IMPLICIT_BIAS_TEST_BLOCKS.length - 1) {\n      this.props.dispatchFinishTest()\n    }\n  }\n  valuesForOptions = (targetOrCategory, leftOrRight) => {\n    if (targetOrCategory === TARGET_OR_CATEGORY.TARGET) {\n      return leftOrRight === LEFT_OR_RIGHT.LEFT ?\n        this.props.leftTargetValues :\n        this.props.rightTargetValues\n    }\n    return leftOrRight === LEFT_OR_RIGHT.LEFT ?\n      this.props.leftCategoryValues :\n      this.props.rightCategoryValues\n  }\n  startNewRound = () => {\n    const currentRound = this.state.currentRound + 1\n    if (currentRound >= this.props.currentBlock.numTrials) {\n      return this.props.dispatchFinishBlock()\n    }\n    const targetOrCategory = !!this.props.soleTargetOrCategory ?\n      this.props.soleTargetOrCategory :\n      TARGET_CATEGORY_ORDER[currentRound % 2]\n    const leftOrRight = LEFT_RIGHT_OPTIONS[Math.round(Math.random())]\n    const values = this.valuesForOptions(targetOrCategory, leftOrRight)\n    const valuesWithoutLastTwoRoundValues = values.filter(v =>\n      [this.state.valueToDisplay, this.state.lastValueToDisplay].indexOf(v) === -1)\n    const valueToDisplayIndex = Math.floor(Math.random() * Math.floor(valuesWithoutLastTwoRoundValues.length - 1))\n    const valueToDisplay = valuesWithoutLastTwoRoundValues[valueToDisplayIndex]\n    return this.setState({\n      currentRound,\n      targetOrCategory,\n      leftOrRight,\n      valueToDisplay,\n      lastValueToDisplay: this.state.valueToDisplay,\n      incorrectKeyPressed: false\n    })\n  }\n  handleKeyPress = (event) => {\n    switch(event.key) {\n      case getEventKeyForInputKey(INPUT_KEYS.LEFT):\n        return this.handleLeftKeyPress()\n      case getEventKeyForInputKey(INPUT_KEYS.RIGHT):\n        return this.handleRightKeyPress()\n      default:\n        return\n    }\n  }\n  handleLeftKeyPress = () => {\n    if (this.state.leftOrRight === LEFT_OR_RIGHT.LEFT) {\n      return this.startNewRound()\n    } else if (this.state.leftOrRight === LEFT_OR_RIGHT.RIGHT) {\n      this.displayIncorrectKeySign()\n    }\n  }\n  handleRightKeyPress = () => {\n    if (this.state.leftOrRight === LEFT_OR_RIGHT.RIGHT) {\n      return this.startNewRound()\n    } else if (this.state.leftOrRight === LEFT_OR_RIGHT.LEFT) {\n      this.displayIncorrectKeySign()\n    }\n  }\n  displayIncorrectKeySign = () => {\n    this.setState({incorrectKeyPressed: true})\n  }\n  render() {\n    const { currentBlock } = this.props\n    const { valueToDisplay, targetOrCategory, incorrectKeyPressed } = this.state\n    if (!currentBlock) return <TestError />\n    return (\n      <div>\n        <div className={`displayed-test-value ${targetOrCategory}`}>{toTitleCase(valueToDisplay)}</div>\n        <div className=\"incorrect-key-x\">{incorrectKeyPressed && 'X'}</div>\n        <p>If you make a mistake, a red <span className=\"bold-red\">X</span> will appear. Press the other key to continue.</p>\n      </div>\n    )\n  } \n}\n\nconst getSoleTargetOrCategory = (leftTarget, leftCategory) => {\n  if (!!leftTarget && !leftCategory) return TARGET_OR_CATEGORY.TARGET\n  if (!leftTarget && !!leftCategory) return TARGET_OR_CATEGORY.CATEGORY\n  return null\n}\n\nconst mapStateToProps = ({ currentTest }, { leftTarget, leftCategory, rightTarget, rightCategory }) => {\n  return {\n    currentTest,\n    currentBlock: IMPLICIT_BIAS_TEST_BLOCKS[currentTest.currentBlockIndex],\n    leftTargetValues: !!leftTarget ? targetAndCategoryValues[leftTarget] : null,\n    rightTargetValues: !!rightTarget ? targetAndCategoryValues[rightTarget] : null,\n    leftCategoryValues: !!leftCategory ? targetAndCategoryValues[leftCategory] : null,\n    rightCategoryValues: !!rightCategory ? targetAndCategoryValues[rightCategory] : null,\n    soleTargetOrCategory: getSoleTargetOrCategory(leftTarget, leftCategory)\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchFinishBlock: () => dispatch(finishBlock()),\n  dispatchFinishTest: () => dispatch(finishTest()),\n  dispatchSetCompatibleMilliseconds: millis => dispatch(setCompatibleMilliseconds(millis)),\n  dispatchSetIncompatibleMilliseconds: millis => dispatch(setIncompatibleMilliseconds(millis))\n})\n\nconst VisibleActiveTest = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActiveTest)\n\nexport default VisibleActiveTest","export const START_TEST = 'START_TEST'\nexport const START_BLOCK = 'START_BLOCK'\nexport const SET_COMPATIBLE_MILLISECONDS = 'SET_COMPATIBLE_MILLISECONDS'\nexport const SET_INCOMPATIBLE_MILLISECONDS = 'SET_INCOMPATIBLE_MILLISECONDS'\nexport const FINISH_BLOCK = 'FINISH_BLOCK'\nexport const FINISH_TEST = 'FINISH_TEST'\nexport const RESET_TEST = 'RESET_TEST'\n\nexport const startTest = test => ({\n  type: START_TEST,\n  test\n})\n\nexport const startBlock = () => ({\n  type: START_BLOCK\n})\n\nexport const setCompatibleMilliseconds = compatibleMilliseconds => ({\n  type: SET_COMPATIBLE_MILLISECONDS,\n  compatibleMilliseconds\n})\n\nexport const setIncompatibleMilliseconds = incompatibleMilliseconds => ({\n  type: SET_INCOMPATIBLE_MILLISECONDS,\n  incompatibleMilliseconds\n})\n\nexport const finishBlock = () => ({\n  type: FINISH_BLOCK\n})\n\nexport const finishTest = () => ({\n  type: FINISH_TEST\n})\n\nexport const resetTest = () => ({\n  type: RESET_TEST\n})\n","import React from 'react'\n\nimport INPUT_KEYS from '../constants/InputKeys'\nimport { toTitleCase } from '../formatters'\n\nconst getInstructionForSide = (currentBlockIndex, target, category, isLeft) => {\n  const onlyTarget = !!target && !category\n  const onlyCategory = !target && !!category\n\n  const inputKey = isLeft ? INPUT_KEYS.LEFT : INPUT_KEYS.RIGHT\n  const side = isLeft ? 'left' : 'right'\n\n  if (onlyTarget || onlyCategory) {\n    const categoryOrTargetClass = onlyTarget ? 'target' : 'category'\n    const value = onlyTarget ? target : category\n    const styledValue = <span className={categoryOrTargetClass}>{value}</span>\n    return currentBlockIndex < 2 ?\n        <p>Put a {side} finger on the <a class=\"btn disabled\"><strong>{inputKey}</strong></a> key for items that belong to the category {styledValue}.</p> :\n        <p>Use the <a class=\"btn disabled\"><strong>{inputKey}</strong> </a>key for {styledValue}</p>\n  }\n  return <p>Use the<a class=\"btn disabled\"> <strong>{inputKey}</strong> </a>key for <span className=\"target\">{target}</span> and for <span className=\"category\">{category}</span>.</p>\n}\n\nconst getExtraInstruction = (currentBlockIndex, hasTargetAndCategory) => {\n  if (currentBlockIndex === 0) return (<p>Items will appear one at a time.</p>)\n  if (hasTargetAndCategory) return (<p>'Each item belongs to only one category.</p>)\n  return null\n}\n\nexport default function Instructions({ currentBlockIndex, leftTarget, leftCategory, rightTarget, rightCategory }) {\n  const leftInstruction = getInstructionForSide(currentBlockIndex, toTitleCase(leftTarget), toTitleCase(leftCategory), true)\n  const rightInstruction = getInstructionForSide(currentBlockIndex, toTitleCase(rightTarget), toTitleCase(rightCategory), false)\n  const extraInstruction = getExtraInstruction(currentBlockIndex, leftTarget && leftCategory)\n\n  return (\n    <div>\n      {leftInstruction}\n      {rightInstruction}\n      { !!extraInstruction && extraInstruction}\n      <p>If you make a mistake, a red <span className=\"bold-red\">X</span> will appear. Press the other key to continue.</p>\n      <p>Go as fast as you can while being accurate.</p>\n                    <div class=\"divider\"></div>\n                    <h4 class=\"header center red-text text-darken-4\">Ready?</h4>\n                        <div class =\"row center\">\n                            <h5> <p>Press the <a class=\"btn disabled\"> <strong>{INPUT_KEYS.START_KEY}</strong></a> when you are ready to start.</p></h5>\n\n                        </div>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport Instructions from './Instructions'\nimport IMPLICIT_BIAS_TEST_BLOCKS from '../constants/ImplicitBiasTestBlocks'\nimport INPUT_KEYS, { getEventKeyForInputKey } from '../constants/InputKeys'\n\nexport default class BlockStart extends Component{\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleKeyPress)\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyPress)\n  }\n  handleKeyPress = (event) => {\n    if (event.key === getEventKeyForInputKey(INPUT_KEYS.START_KEY)) this.props.startBlock()\n  }\n  render() {\n    const { currentBlockIndex, leftTarget, rightTarget, leftCategory, rightCategory } = this.props\n    const displayIndex = currentBlockIndex + 1\n    const numBlocks = Object.keys(IMPLICIT_BIAS_TEST_BLOCKS).length\n    return (\n      <div className=\"block-pre-test\">\n        <h3 class=\"header center red-text text-darken-4\">Part {displayIndex} of {numBlocks}</h3>\n        <div class=\"center\">\n        <Instructions\n          currentBlockIndex={currentBlockIndex}\n          leftTarget={leftTarget}\n          rightTarget={rightTarget}\n          leftCategory={leftCategory}\n          rightCategory={rightCategory}\n        />\n      </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport {  toTitleCase} from '../formatters'\n\nexport default function TargetAndOrCategory({ target, category }) {\n  return (\n    <div className=\"target-and-or-category\">\n      { !!target && (<div className=\"target\">{toTitleCase(target)}</div>) }\n      { !!target && !!category && <div className=\"or-separator\">or</div>}\n      { !!category && (<div className=\"category\">{toTitleCase(category)}</div>) }\n    </div>\n  )\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport ActiveTest from './ActiveTest'\nimport BlockStart from './BlockStart'\nimport TargetAndOrCategory from './TargetAndOrCategory'\nimport TestError from './TestError'\nimport { startBlock } from '../actions'\nimport IMPLICIT_BIAS_TEST_BLOCKS from '../constants/ImplicitBiasTestBlocks'\nimport INPUT_KEYS from '../constants/InputKeys'\nimport { getDisplayValuesForType } from '../constants/TargetCategoryDisplayType'\n\nconst Block = ({ test, currentTest, dispatchStartBlock }) => {\n  const currentBlock = IMPLICIT_BIAS_TEST_BLOCKS[currentTest.currentBlockIndex]\n  if (!currentBlock) return <TestError />\n  const { displayType } = currentBlock\n  const { leftTarget, rightTarget, leftCategory, rightCategory } = getDisplayValuesForType(displayType, test.compatible)\n  return (\n    <div className=\"test-block\">\n      <section className=\"selection-groups\">\n        <div className=\"left-selection-group\">\n          <h6>Press \"{INPUT_KEYS.LEFT}\" for</h6>\n          <TargetAndOrCategory target={leftTarget} category={leftCategory} />\n        </div>\n        <div className=\"right-selection-group\">\n          <h6>Press \"{INPUT_KEYS.RIGHT}\" for</h6>\n          <TargetAndOrCategory target={rightTarget} category={rightCategory} />\n        </div>\n      </section>\n      { currentTest.blockStarted ?\n        <ActiveTest\n          currentTest={currentTest}\n          leftTarget={leftTarget}\n          rightTarget={rightTarget}\n          leftCategory={leftCategory}\n          rightCategory={rightCategory}\n        /> :\n        <BlockStart\n          currentBlockIndex={currentTest.currentBlockIndex}\n          leftTarget={leftTarget}\n          rightTarget={rightTarget}\n          leftCategory={leftCategory}\n          rightCategory={rightCategory}\n          startBlock={() => dispatchStartBlock()}\n        />\n      }\n    </div>\n  )\n}\n\nconst mapStateToProps = ({currentTest}) => ({\n  currentTest\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchStartBlock: () => dispatch(startBlock())\n})\n\nconst VisibleBlock = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Block)\n\nexport default VisibleBlock\n","const BIAS = {\n  NONE: 'NO_BIAS',\n  COMPATIBLE: 'COMPATIBLE',\n  INCOMPATIBLE: 'INCOMPATIBLE'\n}\n\nexport default BIAS\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport { resetTest } from '../actions'\nimport BIAS from '../constants/Bias'\nimport { toTitleCase } from '../formatters'\n\nconst BIAS_THRESHOLD = 1000\n\nconst getBias = (incompatibleMilliseconds, compatibleMilliseconds) => {\n  const incompatibleCompatibleDiff = incompatibleMilliseconds - compatibleMilliseconds\n  if (Math.abs(incompatibleCompatibleDiff) <= BIAS_THRESHOLD) {\n    return BIAS.NONE\n  }\n  return incompatibleCompatibleDiff > 0 ?\n    BIAS.COMPATIBLE :\n    BIAS.INCOMPATIBLE\n}\n\nconst getResultStatement = (bias, test) => {\n  const { targetType, categoryType, compatible } = test\n  const targetsInCompatibleOrder = Object.keys(compatible)\n  const categories = Object.values(compatible)\n  const firstCategory = categories[0]\n  const secondCategory = categories[1]\n  switch(bias) {\n    case BIAS.NONE:\n      return (\n        <p className=\"result-headline\">\n          Your responses suggest no automatic association between <span className=\"target\">{targetType}\n          </span> and <span className=\"category\">{categoryType}</span>.\n          \n        </p>\n        \n      )\n    case BIAS.COMPATIBLE:\n      return (\n        <h4 className=\"result-headline\">\n          Your responses suggest an automatic association for <span className=\"target\">\n          {toTitleCase(targetsInCompatibleOrder[0])}\n          </span> with <span className=\"category\">{toTitleCase(firstCategory)}\n          </span> and <span className=\"target\">{toTitleCase(targetsInCompatibleOrder[1])}\n          </span> with <span className=\"category\">{toTitleCase(secondCategory)}\n          </span>.\n        </h4>\n      )\n    case BIAS.INCOMPATIBLE:\n      const targetsInIncompatibleOrder = targetsInCompatibleOrder.slice().reverse()\n      return (\n        <h4 className=\"result-headline\">\n          Your responses suggest an automatic association for <span className=\"target\">\n          {toTitleCase(targetsInIncompatibleOrder[0])}\n          </span> with <span className=\"category\">{toTitleCase(firstCategory)}\n          </span> and <span className=\"target\">{toTitleCase(targetsInIncompatibleOrder[1])}\n          </span> with <span className=\"category\">{toTitleCase(secondCategory)}\n          </span>.\n          \n        </h4>\n      )\n    default:\n      return 'We were unable to calculate your results due to an unexpected error.'\n  }\n}\n\nclass Results extends Component {\n  componentWillUnmount() {\n    this.props.dispatchResetTest()\n  }\n  render() {\n    const { test, currentTest } = this.props\n    const { incompatibleMilliseconds, compatibleMilliseconds } = currentTest\n    const bias = getBias(incompatibleMilliseconds, compatibleMilliseconds)\n    const resultStatement = getResultStatement(bias, test)\n    return (\n      <div>\n        <h2>Results</h2>\n        {resultStatement}\n        <p>More info about results to come...</p>\n        <Link to=\"/home\">Back to home</Link>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchResetTest: () => dispatch(resetTest())\n})\n\nconst VisibleResults = connect(\n  () => ({}),\n  mapDispatchToProps \n)(Results)\n\nexport default VisibleResults","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function TestNotFound() {\n  return (\n    <div className=\"test-not-found\">\n      <h2>Test not found</h2>\n      <p>We could not find a test with that id. You can find our full lists of tests at the <Link to=\"/home\">home page</Link>.</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function TestStart({ test, onStartTestButtonPress }) {\n  return (\n    <div>\n      <h2>Welcome</h2>\n      <p>You have selected the {test.name}</p> test. You will be asked to sort words into groups as quickly as you can.\n      <button\n        className=\"implicit-test-start-button\"\n        type=\"button\"\n        onClick={e => e.preventDefault() && onStartTestButtonPress()}\n      >Start test</button>\n    </div>\n  )\n}\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { useParams } from 'react-router-dom'\n\nimport { startTest } from '../actions'\nimport Block from '../components/Block'\nimport Results from '../components/Results'\nimport TestNotFound from '../components/TestNotFound'\nimport TestStart from '../components/TestStart'\nimport tests from '../data/tests'\nimport '../scss/implicit-bias-test.scss'\n\nconst ImplicitBiasTest = ({ currentTest, dispatchStartTest }) => {\n  const { testId } = useParams();\n  const test = tests.find((test) => test.id === testId);\n  if (!test) return (<TestNotFound />)\n  if (!!currentTest) {\n    return !currentTest.finished ?\n      <Block test={test} currentTest={currentTest} /> :\n      <Results test={test} currentTest={currentTest} />\n  }\n  return (<TestStart test={test} onStartTestButtonPress={() => dispatchStartTest(test)} />)\n}\n\nconst mapStateToProps = ({ currentTest }) => ({\n  currentTest\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchStartTest: test => dispatch(startTest(test))\n})\n\nconst VisibleImplicitBiasTest = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ImplicitBiasTest)\n\nexport default VisibleImplicitBiasTest\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './containers/Home';\nimport About from './containers/About';\nimport ImplicitBiasTest from './containers/ImplicitBiasTest';\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"nav-and-content\">\n        \n        <Switch>\n          <Route path={`/test/:testId`}>\n            <ImplicitBiasTest />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n\n        \n\n      </div>\n\n    </Router>\n  );\n}\n","import { combineReducers } from 'redux'\nimport {\n  START_TEST,\n  START_BLOCK,\n  SET_COMPATIBLE_MILLISECONDS,\n  SET_INCOMPATIBLE_MILLISECONDS,\n  FINISH_BLOCK,\n  FINISH_TEST,\n  RESET_TEST\n} from '../actions'\n\nconst initialState = {\n  blockStarted: false,\n  finished: false,\n  currentBlockIndex: 0,\n  test: null,\n  compatibleMilliseconds: null,\n  incompatibleMilliseconds: null\n}\n\nfunction currentTest(state = initialState, action) {\n  switch (action.type) {\n    case START_TEST:\n      return Object.assign({}, state, { test: action.test, currentBlockIndex: 0 })\n    case START_BLOCK:\n      return Object.assign({}, state, { blockStarted: true })\n    case FINISH_BLOCK:\n      return Object.assign({}, state, { currentBlockIndex: state.currentBlockIndex + 1, blockStarted: false })\n    case SET_COMPATIBLE_MILLISECONDS:\n      return Object.assign({}, state, { compatibleMilliseconds: action.compatibleMilliseconds })\n    case SET_INCOMPATIBLE_MILLISECONDS:\n      return Object.assign({}, state, { incompatibleMilliseconds: action.incompatibleMilliseconds }) \n    case FINISH_TEST:\n      return Object.assign({}, state, { finished: true, blockStarted: false })\n    case RESET_TEST:\n      return initialState\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  currentTest\n})\n\nexport default rootReducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\n\nimport App from './App'\nimport rootReducer from './reducers'\nimport * as serviceWorker from './serviceWorker'\nimport './scss/global.scss'\n\nconst store = createStore(rootReducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}